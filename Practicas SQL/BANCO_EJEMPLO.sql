/*
	    INSTITUTO NACIONAL DE APRENDIJAZE 
		GESTION BASE DE DATOS 
		MARIEL ROJAS
		31/01/2023
*/

--1.Crear una nueva base de datos llamada BANCO_EJEMPLO y crear las tablas que se muestran en el modelo lógico
CREATE DATABASE BANCO_EJEMPLO;
GO

USE BANCO_EJEMPLO;
GO

------------------------ TABLAS ------------------------
CREATE TABLE CLIENTES(
	IDENTIFICACION varchar(20) CONSTRAINT PK_CLIENTES PRIMARY KEY,
	NOMBRE varchar(20) NOT NULL,
	APELLIDO1 varchar(20) NOT NULL,
	APELLIDO2 varchar(20) NOT NULL,
	TELEFONO varchar(10) NOT NULL,
	CELULAR varchar(10) NOT NULL,
	PROVINCIA varchar(15) NOT NULL,
	CANTON varchar(30) NOT NULL,
	OTRAS_SENIAS varchar(150) NOT NULL,
	INGRESO_PROMEDIO decimal(12,2)
);


-- RESTRICCIONES DE LA TABLA CLIENTES 
--a.La provincia del cliente debe permitir solamente las 7 provincias de Costa Rica
ALTER TABLE  CLIENTES
ADD CONSTRAINT CK_PROVINCIA CHECK(PROVINCIA IN ('ALAJUELA','SAN JOSE','PUNTARENAS',
												'LIMON', 'GUANACASTE', 'CARTAGO', 'HEREDIA'))

--b.El ingreso promedio del cliente debe ser mayor a cero
ALTER TABLE CLIENTES 
ADD CONSTRAINT CK_INGRESO_PROM CHECK(INGRESO_PROMEDIO > 0)

-----------------------------------------------------------------------------------------------

CREATE TABLE CUENTAS (
	NUMERO_CUENTA varchar(20) CONSTRAINT PK_CUENTAS PRIMARY KEY,
	IDENTIFICACION varchar(20) NOT NULL,
	TIPO_CUENTA varchar(10) NOT NULL,
	MONEDA char(7) NOT NULL,
	SALDO_CUENTA decimal(12,2) NOT NULL
);

-- RESTRICIONES DE LA TABLA CUENTAS

--e.El tipo de cuenta debe ser AHORROS o CORRIENTE
ALTER TABLE CUENTAS 
ADD CONSTRAINT CK_TIPO_CUENTA CHECK(TIPO_CUENTA IN ('AHORROS','CORRIENTE'))

--f.El tipo de moneda debe ser DOLARES o COLONES
ALTER TABLE CUENTAS 
ADD CONSTRAINT CK_MONEDA CHECK(MONEDA IN ('COLONES','DOLARES'))

ALTER TABLE CUENTAS DROP CONSTRAINT CK_MONEDA 
-----------------------------------------------------------------------------------------------

CREATE TABLE MOVIMIENTOS_CUENTAS(
	NUMERO_TRANSACCION bigint CONSTRAINT PK_MOVIMIENTO_CUENTAS PRIMARY KEY,
	NUMERO_CUENTA varchar(20) NOT NULL,
	MONTO decimal(10,2) NOT NULL,
	FECHA_TRANSACCION datetime NOT NULL DEFAULT GETDATE(),
	TIPO_TRANSACCION varchar(8) NOT NULL,
	DETALLE varchar(30) NOT NULL
);

-- RESTRICIONES DE LA TABLA MOVIMIENTO_CUENTAS

--c.La fecha de transacción debe ser mayor o igual a la de hoy y de forma predeterminada debe ser la de hoy.
ALTER TABLE MOVIMIENTOS_CUENTAS
ADD CONSTRAINT CK_FECHA_TRANSACCION CHECK(FECHA_TRANSACCION >= GETDATE()) 

ALTER TABLE MOVIMIENTOS_CUENTAS DROP CONSTRAINT CK_FECHA_TRANSACCION


--d.El tipo de transacción debe ser CREDITO o DEBITO
ALTER TABLE MOVIMIENTOS_CUENTAS
ADD CONSTRAINT CK_TIPO_TRANSACCION CHECK(TIPO_TRANSACCION IN ( 'CREDITO', 'DEBITO'))

-----------------------------------------------------------------------------------------

--RELACIONES DE LLAVES 

--IDENTIFICACION ES FK EN CUENTAS QUE ES PK EN LA TABLA CLIENTES
ALTER TABLE CUENTAS ADD CONSTRAINT FK_IDENTIFICACION 
FOREIGN KEY (IDENTIFICACION) REFERENCES CLIENTES(IDENTIFICACION);

-- NUMERO_CUENTA ES FK EN MOVIMIENTOS_CUENTAS QUE ES PK EN LA TABLA CUENTAS
ALTER TABLE MOVIMIENTOS_CUENTAS ADD CONSTRAINT FK_NUMERO_CUENTA
FOREIGN KEY (NUMERO_CUENTA) REFERENCES CUENTAS(NUMERO_CUENTA);

-----------------------------------------------------------------------------------------

--3.Digite la siguiente información en la tabla de Clientes

INSERT INTO CLIENTES (IDENTIFICACION,NOMBRE,APELLIDO1,APELLIDO2,TELEFONO,CELULAR,PROVINCIA,CANTON,OTRAS_SENIAS)
VALUES ('001','JUAN','MATAMOROS','ROJAS','24532656','88447755','ALAJUELA','PALMARES','NO REGISTRA'),
	   ('002','ROGELIO','FERRETO','MORA','24531212','88996655','CARTAGO','ALVARADO','NO REGISTRA'),
	   ('003','MARIA','ARAYA','CAMPOS','24538978','88551122','PUNTARENAS','GARABITO','NO REGISTRA'),
	   ('004','DANILO','ACOSTA','ARROYO','24531545','88335544','ALAJUELA','CENTRAL','NO REGISTRA'),
	   ('005','RAMON','VASQUEZ','BOLAÑOS','24531978','88447711','ALAJUELA','GRECIA','NO REGISTRA'),
	   ('006','JOSE','CHAVES','SALAS','24536633','88020301','HEREDIA','SAN ISIDRO','NO REGISTRA'),
	   ('007','CRISTINA','PEREZ','DELGADO','24531145','88010205','PUNTARENAS','BUENOS AIRES','NO REGISTRA');

	   SELECT * FROM CLIENTES;



-- 4.Digite la siguiente información en la tabla de Cuentas
	SELECT * FROM CUENTAS;

INSERT INTO CUENTAS (NUMERO_CUENTA,IDENTIFICACION,TIPO_CUENTA,MONEDA,SALDO_CUENTA)
VALUES  ('1','001','AHORROS','COLONES',1000000),
		('2','002','AHORROS','COLONES',1500000),
		('3','001','CORRIENTE','COLONES',2450000),
		('4','003','AHORROS','COLONES',854000),
		('5','004','AHORROS','COLONES',9500000),
		('6','005','CORRIENTE','COLONES',1250000),
		('7','006','AHORROS','COLONES',150000);

DELETE FROM CUENTAS;


	
--5.Digite la siguiente información en la tabla de Transacciones

INSERT INTO MOVIMIENTOS_CUENTAS (NUMERO_TRANSACCION,NUMERO_CUENTA,MONTO,TIPO_TRANSACCION,FECHA_TRANSACCION,DETALLE)
VALUES  (1,'1',10000,'DEBITO','20230125','NO REGISTRA'),
		(2,'2',15000,'CREDITO','20230126','PAGO TELEFONO'),
		(3,'1',55000,'DEBITO','20230127','COMPRA SUPERMECADO'),
		(4,'1',48500,'DEBITO','20230128','NO REGISTRA'),
		(5,'4',5000,'CREDITO','20230129','NO REGISTRA'),
		(6,'6',23000,'DEBITO','20230130','PAGO PRESTAMO'),
		(7,'2',8500,'DEBITO','20230131',' NO REGISTRA');

		DELETE FROM MOVIMIENTOS_CUENTAS;
-- BORRE LA RESTRICCION PARA QUE ME DEJARA METER LOS DATOS DE LAS FECHAS DE LOS MOVIMIENTOS
ALTER TABLE MOVIMIENTOS_CUENTAS DROP CONSTRAINT CK_FECHA_TRANSACCION

-------------------------------------------------------------------------------------------
--CONSULTAS
--6.	Realice las siguientes consultas de selección
--1)	ID_Cliente, nombre completo (concatenado) y teléfono de todos los clientes de Heredia

SELECT IDENTIFICACION, NOMBRE + ' ' + APELLIDO1 + ' ' + APELLIDO2 AS NOMBRE_COMPLETO, TELEFONO
FROM CLIENTES
WHERE PROVINCIA = 'HEREDIA';

--2)ID_Cliente, nombre completo (concatenado) y teléfono de todos los clientes cuyo nombre inicie con D o S
SELECT IDENTIFICACION, NOMBRE + ' ' + APELLIDO1 + ' ' + APELLIDO2 AS NOMBRE_COMPLETO, TELEFONO
FROM CLIENTES
WHERE NOMBRE LIKE 'D%' OR NOMBRE LIKE 'S%';

--3) ID_Cliente y nombre completo (concatenado) de todos los clientes de Alajuela que viven en el cantón de Grecia

SELECT IDENTIFICACION, NOMBRE + ' ' + APELLIDO1 + ' ' + APELLIDO2 AS NOMBRE_COMPLETO, PROVINCIA,CANTON
FROM CLIENTES
WHERE PROVINCIA = 'ALAJUELA' AND CANTON = 'GRECIA'; 

SELECT * FROM CLIENTES;


--4)	ID_Cliente, nombre completo (concatenado), número de cuenta, saldo
--y tipo de cuenta de todos los clientes ordenado por nombre

SELECT C.IDENTIFICACION, NOMBRE + ' ' + APELLIDO1 + ' ' + APELLIDO2 AS NOMBRE_COMPLETO,NUMERO_CUENTA,SALDO_CUENTA, TIPO_CUENTA
FROM CLIENTES C INNER JOIN CUENTAS
ON C.IDENTIFICACION = CUENTAS.IDENTIFICACION 
ORDER BY NOMBRE ASC

-- PODRIA AGREGAR DISTINCT PARA QUE NO SE REPITAN

-- 5)	ID_Cliente, nombre completo (concatenado) y total de dinero en todas las cuentas
SELECT C.IDENTIFICACION, NOMBRE + ' ' + APELLIDO1 + ' ' + APELLIDO2 AS NOMBRE_COMPLETO, SUM(SALDO_CUENTA) AS DINERO_TOTAL
FROM CLIENTES C INNER JOIN CUENTAS
ON C.IDENTIFICACION = CUENTAS.IDENTIFICACION 
GROUP BY C.IDENTIFICACION, NOMBRE, APELLIDO1,APELLIDO2 

--6)	ID_Cliente, nombre completo (concatenado), número de cuenta, saldo y monto de interés, 
--de las cuentas Corrientes, tomando en cuenta que el interés es de un 2% sobre el saldo
SELECT C.IDENTIFICACION, NOMBRE + ' ' + APELLIDO1 + ' ' + APELLIDO2 AS NOMBRE_COMPLETO,
NUMERO_CUENTA,SALDO_CUENTA, FLOOR(SALDO_CUENTA *0.02) AS MONTO_INTERES
FROM CLIENTES C INNER JOIN CUENTAS
ON C.IDENTIFICACION = CUENTAS.IDENTIFICACION 
GROUP BY C.IDENTIFICACION, NOMBRE, APELLIDO1,APELLIDO2,NUMERO_CUENTA,SALDO_CUENTA 


--7) ID_Cliente, nombre completo (concatenado), número de cuenta, monto total de débitos realizados por fecha
SELECT C.IDENTIFICACION, NOMBRE + ' ' + APELLIDO1 + ' ' + APELLIDO2 AS NOMBRE_COMPLETO,MC.NUMERO_CUENTA,
SUM(MONTO) AS MONTOS_FECHA
FROM CLIENTES C INNER JOIN CUENTAS
ON C.IDENTIFICACION = CUENTAS.IDENTIFICACION 
INNER JOIN MOVIMIENTOS_CUENTAS MC
ON CUENTAS.NUMERO_CUENTA = MC.NUMERO_CUENTA
WHERE TIPO_TRANSACCION = 'DEBITO'
GROUP BY C.IDENTIFICACION, NOMBRE, APELLIDO1,APELLIDO2,MC.NUMERO_CUENTA 

--8) ID_Cliente, nombre completo (concatenado) y cantidad de cuentas de cada cliente
SELECT C.IDENTIFICACION, NOMBRE + ' ' + APELLIDO1 + ' ' + APELLIDO2 AS NOMBRE_COMPLETO,COUNT(NUMERO_CUENTA) AS CANTIDAD_CUENTAS
FROM CLIENTES C INNER JOIN CUENTAS
ON C.IDENTIFICACION = CUENTAS.IDENTIFICACION 
GROUP BY C.IDENTIFICACION, NOMBRE, APELLIDO1,APELLIDO2
SELECT * FROM CLIENTES;
SELECT * FROM CUENTAS;


--9)Número de cuenta, tipo de cuenta y suma de monto de transacción agrupado por tipo de transacción
SELECT C.NUMERO_CUENTA,TIPO_CUENTA,SUM(MONTO) AS MONTO_TRANSACCION, TIPO_TRANSACCION, TIPO_CUENTA
FROM CUENTAS C INNER JOIN MOVIMIENTOS_CUENTAS MC
ON C.NUMERO_CUENTA = MC.NUMERO_CUENTA
GROUP BY C.NUMERO_CUENTA,TIPO_CUENTA,TIPO_TRANSACCION
ORDER BY NUMERO_CUENTA ASC

--10) Suma de montos de movimientos realizados el día de hoy
SELECT MONTO, FECHA_TRANSACCION, SUM(MONTO) AS MONTOS_HOY 
FROM MOVIMIENTOS_CUENTAS
WHERE FECHA_TRANSACCION = GETDATE();



--11) Cantidad de clientes por provincia
SELECT PROVINCIA,COUNT(IDENTIFICACION) AS CANT_CLIENTES
FROM CLIENTES
GROUP BY PROVINCIA

--12)	Numero de transacción, número de cuenta, monto, monto por comisión (es un 1% del monto)
SELECT NUMERO_TRANSACCION,NUMERO_CUENTA, MONTO, FORMAT(MONTO * 0.01,'##,###.00') AS COMISION
FROM MOVIMIENTOS_CUENTAS

--13)	Número de cuenta, saldo y tipo de todas las cuentas que no hayan realizado ninguna transacción


DECLARE @Monto decimal(12,2),
		@CuentaOrigen varchar(20),
		@CuentaDestino varchar(20),
		@Detalle varchar(30)

--Asigna el monto de la transferencia y las cuentas Origen y Destino 
SET @Monto = 50000
SET @CuentaOrigen = '1'
SET @CuentaDestino = '2'
SET @Detalle = 'Pago Intereses'

UPDATE CUENTAS
SET SALDO_CUENTA = SALDO_CUENTA - @Monto
WHERE NUMERO_CUENTA = @CuentaOrigen

INSERT INTO MOVIMIENTOS_CUENTAS (NUMERO_CUENTA,MONTO, FECHA_TRANSACCION,TIPO_TRANSACCION,DETALLE)
	VALUES (@CuentaOrigen,@Monto,getdate(),'DEBITO',@Detalle)

	
INSERT INTO MOVIMIENTOS_CUENTAS (NUMERO_CUENTA, MONTO,FECHA_TRANSACCION,TIPO_TRANSACCION,DETALLE)
	VALUES (@CuentaDestino,@Monto,getdate(),'CREDITO',@Detalle)

	UPDATE CUENTAS
SET SALDO_CUENTA = SALDO_CUENTA + @Monto
WHERE NUMERO_CUENTA = @CuentaDestino

SELECT * FROM CUENTAS;
SELECT * FROM MOVIMIENTOS_CUENTAS;

